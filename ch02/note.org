* 2.2 A  stright forward solution
  #+begin_src lisp
    (defun sentence ()
      (append (noun-phrase) (verb-phrase)))

    (defun noun-phrase ()
      (append (Article) (Noun)))

    (defun verb-phrase ()
      (append (Verb) (noun-phrase)))

    (defun Article () (one-of '(the a)))
    (defun Noun () (one-of '(man ball woman table)))
    (defun Verb () (one-of '(hit took saw liked)))

    (defun one-of (set)
      "pick on element of set, and make a list of it"
      (list (random-elt set)))

    (defun random-elt (choices)
      "choose an element from a list at random"
      (elt choices (random (length choices))))

  #+end_src

  #+RESULTS:
  : RANDOM-ELT

  

* 2.3 A rule-based solution
  #+begin_src lisp
    (defparameter *simple-grammar*
      '((sentence -> (noun-phrase verb-phrase))
	(noun-phrase -> (Article Noun))
	(verb-phrase -> (Verb noun-phrase))
	(Article -> the a)
	(Noun -> man ball woman table)
	(Verb -> hit took saw liked))
      "A grammar for a trivial subset of English.")

    (defvar *grammar* *simple-grammar*
      "The grammar used by generate.  Initially, this is
      ,*simple-grammar*, but we can switch to other grammars.")



    (defun rule-lhs (rule)
      "the left hand side of a rule"
      (first rule))

    (defun rule-rhs (rule)
      "the right hand side of a rule"
      (rest (rest rule)))

    (defun rewrites (category)
      "Return a list of the possible rewrites for this category."
      (rule-rhs (assoc category *grammar*)))

    (defun generate (phrase)
      "generate a random sentence or phrase"
      (cond ((listp phrase)
	     (mapcan #'generate phrase))
	    ((rewrites phrase)
	     (generate (random-elt (rewrites phrase))))
	    (t (list phrase))))
  #+end_src

  #+RESULTS:
  : GENERATE


* 2.4 The paths to follow
  - The solution one: Use the most straightforward mapping of the problem description directly into Lisp code.
  - The solution two: Use the most natural notation available to solve the problem, and then worry about writing an interpreter for that notation !!!
  - The idea behind approach (2) is to work with the problem as much as possible in its own terms, and to minimize the part of the solution that is written directly in Lisp.

* 2.5 Changing the grammar without changing the program
  - Now, we introduce a bigger grammer and our approach (2) could handle it without need to change the code
    #+begin_src lisp
      (defparameter *bigger-grammar*
	'((sentence -> (noun-phrase verb-phrase))
	  (noun-phrase -> (Article Adj* Noun PP*) (Name) (Pronoun))
	  (verb-phrase -> (Verb noun-phrase PP*))
	  (PP* -> () (PP PP*))
	  (Adj* -> () (Adj Adj*))
	  (PP -> (Prep noun-phrase))
	  (Prep -> to in by with on)
	  (Adj -> big little blue green adiabatic)
	  (Article -> the a)
	  (Name -> Pat Kim Lee Terry Robin)
	  (Noun -> man ball woman table)
	  (Verb -> hit took saw liked)
	  (Pronoun -> he she it these those that)))

      (setf *grammar* *bigger-grammar*)
    #+end_src

    #+RESULTS:
    | SENTENCE    | -> | (NOUN-PHRASE VERB-PHRASE) |            |           |       |           |      |
    | NOUN-PHRASE | -> | (ARTICLE ADJ* NOUN PP*)   | (NAME)     | (PRONOUN) |       |           |      |
    | VERB-PHRASE | -> | (VERB NOUN-PHRASE PP*)    |            |           |       |           |      |
    | PP*         | -> | NIL                       | (PP PP*)   |           |       |           |      |
    | ADJ*        | -> | NIL                       | (ADJ ADJ*) |           |       |           |      |
    | PP          | -> | (PREP NOUN-PHRASE)        |            |           |       |           |      |
    | PREP        | -> | TO                        | IN         | BY        | WITH  | ON        |      |
    | ADJ         | -> | BIG                       | LITTLE     | BLUE      | GREEN | ADIABATIC |      |
    | ARTICLE     | -> | THE                       | A          |           |       |           |      |
    | NAME        | -> | PAT                       | KIM        | LEE       | TERRY | ROBIN     |      |
    | NOUN        | -> | MAN                       | BALL       | WOMAN     | TABLE |           |      |
    | VERB        | -> | HIT                       | TOOK       | SAW       | LIKED |           |      |
    | PRONOUN     | -> | HE                        | SHE        | IT        | THESE | THOSE     | THAT |

* 2.6 using the same data for several programs
  - Ex01: approach 02 can be easier to use the information or multiple purposes. Suppose we wanted a function that generate a tree (nested list) for the syntax of a sentence
    #+begin_src lisp
      (defun generate-tree (phrase)
	"generate a random sentence or phrase, with a complte parse tree"
	(cond ((listp phrase)
	       (mapcar #'generate-tree phrase))
	      ((rewrites phrase)
	       (cons phrase (generate-tree (random-elt (rewrites phrase)))))
	      (t (list phrase))))
    #+end_src

    #+RESULTS:
    : GENERATE-TREE

* Homework
  - Write a cross-product function
    #+begin_src lisp
      (defun cross-product (fn xlist ylist)
	"return a list of all (fn x y) values"
	(mapcan #'(lambda (y)
		    (mapcar #'(lambda (x) (funcall fn x y))
			    xlist))
		ylist))
    #+end_src

    #+RESULTS:
    : CROSS-PRODUCT


  - usage of cross-product
    #+begin_src lisp
      (cross-product #'+ '(1 2 3) '(10 20 30))
    #+end_src

    #+RESULTS:
    | 11 | 12 | 13 | 21 | 22 | 23 | 31 | 32 | 33 |

    #+begin_src lisp
      (cross-product #'list '(a b c d e f) '(1 2 3 4 5 6))
    #+end_src

    #+RESULTS:
    | A | 1 |
    | B | 1 |
    | C | 1 |
    | D | 1 |
    | E | 1 |
    | F | 1 |
    | A | 2 |
    | B | 2 |
    | C | 2 |
    | D | 2 |
    | E | 2 |
    | F | 2 |
    | A | 3 |
    | B | 3 |
    | C | 3 |
    | D | 3 |
    | E | 3 |
    | F | 3 |
    | A | 4 |
    | B | 4 |
    | C | 4 |
    | D | 4 |
    | E | 4 |
    | F | 4 |
    | A | 5 |
    | B | 5 |
    | C | 5 |
    | D | 5 |
    | E | 5 |
    | F | 5 |
    | A | 6 |
    | B | 6 |
    | C | 6 |
    | D | 6 |
    | E | 6 |
    | F | 6 |
