* 2.2 A  stright forward solution
  #+begin_src lisp
    (defun sentence ()
      (append (noun-phrase) (verb-phrase)))

    (defun noun-phrase ()
      (append (Article) (Noun)))

    (defun verb-phrase ()
      (append (Verb) (noun-phrase)))

    (defun Article () (one-of '(the a)))
    (defun Noun () (one-of '(man ball woman table)))
    (defun Verb () (one-of '(hit took saw liked)))

    (defun one-of (set)
      "pick on element of set, and make a list of it"
      (list (random-elt set)))

    (defun random-elt (choices)
      "choose an element from a list at random"
      (elt choices (random (length choices))))

  #+end_src

  

* 2.3 A rule-based solution
  #+begin_src lisp
    (defparameter *simple-grammar*
      '((sentence -> (noun-phrase verb-phrase))
	(noun-phrase -> (Article Noun))
	(verb-phrase -> (Verb noun-phrase))
	(Article -> the a)
	(Noun -> man ball woman table)
	(Verb -> hit took saw liked))
      "A grammar for a trivial subset of English.")

    (defvar *grammar* *simple-grammar*
      "The grammar used by generate.  Initially, this is
      ,*simple-grammar*, but we can switch to other grammars.")



    (defun rule-lhs (rule)
      "the left hand side of a rule"
      (first rule))

    (defun rule-rhs (rule)
      "the right hand side of a rule"
      (rest (rest rule)))

    (defun rewrites (category)
      "Return a list of the possible rewrites for this category."
      (rule-rhs (assoc category *grammar*)))
  #+end_src


